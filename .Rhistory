"Produto Interno Bruto per Capita",
"Valor Adicionado Bruto Administraçao Publica",
"Imposto Recolhidos")
for (i in 1:8) {
dPIB$variable <- gsub(OldVariable[i], NewVariable[i], dPIB$variable)
}
OldVariable <- c("Produto Interno Bruto \\(PIB) a Preços Correntes \\(R$ 1.000,00)",
"PIB - Valor Adicionado Bruto \\(VAB) a Preços Básicos - Total \\(R$ 1.000,00)",
"PIB - VAB a Preços Básicos na Agropecuária \\(R$ 1.000,00)",
"PIB - VAB a Preços Básicos na Indústria \\(R$ 1.000,00)",
"PIB - VAB a Preços Básicos no Comércio e Serviços \\(R$ 1.000,00)",
"Produto Interno Bruto \\(PIB) per Capita \\(R$ 1,00)",
"PIB - VAB a Preços Básicos na Administração Pública \\(R$ 1.000,00)",
"PIB - Impostos \\(R$ 1.000,00)")
NewVariable <- c("Produto Interno Bruto a Preços Correntes",
"Valor Adicionado Bruto Total",
"Valor Adicionado Bruto Agropecuaria",
"Valor Adicionado Bruto Industria",
"Valor Adicionado Bruto Comercio e Serviços",
"Produto Interno Bruto per Capita",
"Valor Adicionado Bruto Administraçao Publica",
"Imposto Recolhidos")
for (i in 1:8) {
dPIB$variable <- gsub(OldVariable[i], NewVariable[i], dPIB$variable)
}
#for (i in 1:8) {
dPIB$variable <- gsub(" *\\(.*?\\) *", "", dPIB$variable)
OldVariable <- unique(dPIB$variable)
NewVariable <- c("Produto Interno Bruto a Preços Correntes",
"Valor Adicionado Bruto Total",
"Valor Adicionado Bruto Agropecuaria",
"Valor Adicionado Bruto Industria",
"Valor Adicionado Bruto Comercio e Serviços",
"Produto Interno Bruto per Capita",
"Valor Adicionado Bruto Administraçao Publica",
"Imposto Recolhidos")
dPIB$variable <- gsub(OldVariable[i], NewVariable[i], dPIB$variable)
for (i in 1:8) {
dPIB$variable <- gsub(OldVariable[i], NewVariable[i], dPIB$variable)
}
# Step 3: Add Group Names
dPIB$group <- "PIB"
# Step 3: Add Standard
dPIB$standard <- "mil reais"
stand <- c("reais", "individuos", "dias",    "%", "por mil hab", "mil reais")
fStandard <- data.frame(standard = stand,
standard_code = sequence(length(stand)))
View(fStandard)
{
# Step 1: import city database
fCity = read_delim("C:/Users/CepaTech/Documents/Profissional/SEPL/PowerBi 3/Banco de Dados/citiy/fcity2.csv",
";", escape_double = FALSE,
locale = locale(decimal_mark = ",",
grouping_mark = ".",
encoding = "UTF-8"),
trim_ws = TRUE)
# Step 2: Rename columns
colnames(fCity)[1] <- "city_code"
# Step 3: creating a list
temp = fCity
temp = as.vector(temp)
temp = as.vector(fCity$city_code)
# Step4: Export do db paste
write.csv(fCity, "C:/Users/CepaTech/Documents/GitHub/powerbi3.0/db/parameters/fCity.csv")
# Step 5: Create lowercase city parameter to joins with IBGE Databases
fCity2 <- fCity
fCity2$city <- tolower(fCity2$city)
} # Part 1: Prepare City reference to forward joins
{
# Step 1: Import Database
fPop <- read_excel("~/Profissional/SEPL/PowerBi 3/Banco de Dados/population/pop_pr.xlsx")
# Step 2: Melt to create a year column
fPop <- melt(fPop)
colnames(fPop) <- c("city", "variable", "year", "population")
fPop$variable <- "population"
fPop$year <- as.character(fPop$year)
# Step 3: Export database
write.csv(fPop, "C:/Users/CepaTech/Documents/GitHub/powerbi3.0/db/parameters/fPop.csv")
} # Part 2: Prepare population to forward joins
{
# Step 1: Create fType
fType <- data.frame(type = c("absolute", "rate", "por mil"), type_code = c(1:3))
stand <- c("reais", "individuos", "dias",    "%", "por mil hab", "mil reais")
fStandard <- data.frame(standard = stand,
standard_code = sequence(length(stand)))
write.csv(fType,
"C:/Users/CepaTech/Documents/GitHub/powerbi3.0/db/parameters/fType.csv")
write.csv(fStandard,
"C:/Users/CepaTech/Documents/GitHub/powerbi3.0/db/parameters/fStandard.csv")
} # Part 3: Create General use parameter
View(fType)
dPIB <- gather(dPIB, key = "year", value = "result", c("2010":"2020"))
View(dPIB)
dPIB <- gather(dPIB, key = "year", value = "result", c("2010":"2018"))
# Step 2: Create PIB Variable Codes
variable <- unique(dPIB$variable)
fWealthVariable <- variable %>%
mutate(variable_code = sequence(n()))
fWealthVariable <- as.data.frame(variable) %>%
mutate(variable_code = sequence(n()))
View(fWealthVariable)
fWealthVariable <- fWealthVariable[, c(2,1)]
# Step 3: Create PIB Group Code
fWealthGroup <- data.frame(group_code = 1, group = "PIB")
View(fWealthGroup)
# Step 4: Add Variable codes
dPIB <- left_join(dPIB, fWealthVariable, "variable")
View(dPIB)
# Step 4: Add city code
dPIB <- left_join(dPIB, fcity, "city")
# Step 4: Add city code
dPIB <- left_join(dPIB, fCity, "city")
dPIB <- dPIB[, c(1:6, 8, 7)]
{
# Step 1: Import Wealth database
dPIB <- read_delim("~/Profissional/SEPL/PowerBi 3/Banco de Dados/wealth/PIB.csv",
delim = ";", escape_double = FALSE, locale = locale(decimal_mark = ",",
grouping_mark = ".", encoding = "ISO-8859-1"),
trim_ws = TRUE)
colnames(dPIB)[1:2] <-  c("city", "variable")
# Step 2: Replace Variable names
dPIB$variable <- gsub(" *\\(.*?\\) *", "", dPIB$variable)
OldVariable <- unique(dPIB$variable)
NewVariable <- c("Produto Interno Bruto a Preços Correntes",
"Valor Adicionado Bruto Total",
"Valor Adicionado Bruto Agropecuaria",
"Valor Adicionado Bruto Industria",
"Valor Adicionado Bruto Comercio e Serviços",
"Produto Interno Bruto per Capita",
"Valor Adicionado Bruto Administraçao Publica",
"Imposto Recolhidos")
for (i in 1:8) {
dPIB$variable <- gsub(OldVariable[i], NewVariable[i], dPIB$variable)
}
# Step 3: Add Group Names
dPIB$group <- "PIB"
# Step 3: Add Standard
dPIB$standard <- "mil reais"
# Step 4: Add Type
dPIB$type <- "absolute"
} # Part 1: Import and Prepare Database
# Step 1: Gather years
# Step 1: Gather years
dPIB <- gather(dPIB, key = "year", value = "result", c("2010":"2018"))
# Step 2: Create PIB Variable Codes
variable <- unique(dPIB$variable)
fWealthVariable <- as.data.frame(variable) %>%
mutate(variable_code = sequence(n()))
fWealthVariable <- fWealthVariable[, c(2,1)]
# Step 3: Create PIB Group Code
fWealthGroup <- data.frame(group_code = 1, group = "PIB")
# Step 4: Add city code
dPIB <- left_join(dPIB, fCity, "city")
# Step 5: Add Variable codes
dPIB <- left_join(dPIB, fWealthVariable, "variable")
# Step 6: Add Group code
dPIB <- left_join(dPIB, fWealthGroup, "group")
# Step 7: Add Standard code
dPIB <- left_join(dPIB, fStandard, "standard")
# Step 8: Add Type code
dPIB <- left_join(dPIB, fType, "type")
{
# Step 1: Import hospitalization database and export raw base
dHospi <- read_delim("~/Profissional/SEPL/PowerBi 3/Banco de Dados/health/Hospitalizations.csv",
delim = ";", escape_double = FALSE, locale = locale(decimal_mark = ",",
grouping_mark = ".", encoding = "ISO-8859-1"),
trim_ws = TRUE)
write.csv(dHospi, "C:/Users/CepaTech/Documents/GitHub/powerbi3.0/db/raw/health/dHospi.csv")
# Step 2: Rename columns
colnames(dHospi)[1:2] <- c("city", "variable")
# Step 3: Join city code with database
dHospi <- left_join(dHospi, fCity, by = "city")
#Step 4: rearrange dHospi
dHospi <- dHospi[, c(1, 14, 2:13)]
}# Part 1: Import Hospitalization and Join with city_code
{
# Step 1: Separate variable, group and type columns
dHospi <- cbind(dHospi,
as.data.frame(do.call("rbind", strsplit(as.character(dHospi$variable),' - '))))
dHospi <- dHospi[, !colnames(dHospi) == "V2"]
dHospi <- cbind(dHospi,
as.data.frame(do.call("rbind",
ex_between(dHospi$V3, "(", ")",
include.markers = TRUE,
trim = TRUE,
))))
dHospi <- dHospi[, -17]
colnames(dHospi)[15:16] <- c("group", "variable")
dHospi <- dHospi[, c(1:2, 15:16, 4:14)]
dHospi$variable <- gsub("\\s*\\([^\\)]+\\)","", dHospi$variable)
} # Part 2: Create group_code, variable_code and type_code for Hospitalization
{
# Step 1: Import imunization database
dImun <- read_delim("~/Profissional/SEPL/PowerBi 3/Banco de Dados/health/imunization.csv",
delim = ";", escape_double = FALSE, col_types = cols(`2010` = col_number(),
`2011` = col_number(), `2012` = col_number(),
`2013` = col_number(), `2014` = col_number(),
`2015` = col_number(), `2016` = col_number(),
`2017` = col_number(), `2018` = col_number(),
`2019` = col_number(), `2020` = col_number()),
locale = locale(decimal_mark = ",", grouping_mark = ".",
encoding = "ISO-8859-1"), trim_ws = TRUE)
write.csv(dImun, "C:/Users/CepaTech/Documents/GitHub/powerbi3.0/db/raw/health/dImun.csv")
# Step 2: Rename columns
colnames(dImun)[1:2] <- c("city", "variable")
# Step 3: Join city code with database
dImun <- left_join(dImun, fCity, by = "city")
#Step 4: rearrange dImun
dImun <- dImun[, c(1, 14, 2:13)]
} # Part 3: Import and clean Imunization
{
# Step 1: Separate variable, group and type columns
dImun <- cbind(dImun,
as.data.frame(do.call("rbind", strsplit(as.character(dImun$variable),' - '))))
dImun <- cbind(dImun,
as.data.frame(do.call("rbind",
ex_between(dImun$V2, "(", ")",
include.markers = TRUE,
trim = TRUE,
))))
dImun <- dImun[, -c(17:20)]
colnames(dImun)[15:16] <- c("group", "variable")
dImun <- dImun[, c(1:2, 15:16, 4:14)]
dImun$variable <- gsub("\\s*\\([^\\)]+\\)","", dImun$variable)
} # Part 4: Create Variable and Group Code for Imun
{
# Step 1: Import Leitos database
dLeitos <- read_delim("~/Profissional/SEPL/PowerBi 3/Banco de Dados/health/leitos.csv",
delim = ";", escape_double = FALSE, col_types = cols(`2010` = col_number(),
`2011` = col_number(), `2012` = col_number(),
`2013` = col_number(), `2014` = col_number(),
`2015` = col_number(), `2016` = col_number(),
`2017` = col_number(), `2018` = col_number(),
`2019` = col_number(), `2020` = col_number()),
locale = locale(decimal_mark = ",", grouping_mark = ".",
encoding = "ISO-8859-1"), trim_ws = TRUE)
write.csv(dLeitos, "C:/Users/CepaTech/Documents/GitHub/powerbi3.0/db/raw/health/dLeitos.csv")
# Step 2: Rename columns
colnames(dLeitos)[1:2] <- c("city", "variable")
# Step 3: Join city code with database
dLeitos <- left_join(dLeitos, fCity, by = "city")
#Step 4: rearrange dLeitos
dLeitos <- dLeitos[, c(1, 14, 2:13)]
} # Part 5: Import and clean Leitos
{
# Step 1: Separate variable, group and type columns
dLeitos <- cbind(dLeitos,
as.data.frame(do.call("rbind", strsplit(as.character(dLeitos$variable),' - '))))
dLeitos <- unite(dLeitos, "variable", c("V2", "V3"), sep = " ", remove = TRUE)
dLeitos$variable <- gsub("Existente", "", dLeitos$variable)
colnames(dLeitos)[14] <- "group"
dLeitos <- dLeitos[, c(1:2, 14:15, 3:13)]
dLeitos <- dLeitos[!(dLeitos$variable == " Hospital / Dia" | dLeitos$variable == "SUS Hospital / Dia"), ]
dLeitos$variable <- paste("Leitos", dLeitos$variable)
} # Part 6: Create Variable and Group for Leitos
{
# Step 1: Import mortality database
dMorta <-  read_delim("~/Profissional/SEPL/PowerBi 3/Banco de Dados/health/mortality.csv",
delim = ";", escape_double = FALSE, col_types = cols(`2010` = col_number(),
`2011` = col_number(), `2012` = col_number(),
`2013` = col_number(), `2014` = col_number(),
`2015` = col_number(), `2016` = col_number(),
`2017` = col_number(), `2018` = col_number(),
`2019` = col_number(), `2020` = col_number()),
locale = locale(decimal_mark = ",", grouping_mark = ".",
encoding = "ISO-8859-1"), trim_ws = TRUE)
write.csv(dMorta, "C:/Users/CepaTech/Documents/GitHub/powerbi3.0/db/raw/health/dMorta.csv")
# Step 2: Rename columns
colnames(dMorta)[1:2] <- c("city", "variable")
# Step 3: Join city code with database
dMorta <- left_join(dMorta, fCity, by = "city")
#Step 4: rearrange dMorta
dMorta <- dMorta[, c(1, 14, 2:13)]
} # Part 7: Import and clean Mortality
{
# Step 1: Separate variable, group and type columns
dMorta <- cbind(dMorta,
as.data.frame(do.call("rbind", strsplit(as.character(dMorta$variable),' - '))))
dMorta <- unite(dMorta, "variable", c("V2", "V3"), sep = " ", remove = TRUE)
colnames(dMorta)[14] <- "group"
dMorta <- dMorta[, c(1:2, 14:15, 3:13)]
cap <- c("Cap I ", "Cap II ", "Cap III ", "Cap IV ", "Cap V ",
"Cap VI ", "Cap VII ", "Cap VIII ", "Cap IX ", "Cap X ",
"Cap XI ", "Cap XII ", "Cap XIII ", "Cap XIV ", "Cap XV ",
"Cap XVI ", "Cap XVII ")
for (i in 1:17) {
dMorta$variable <- gsub(cap[i], "", dMorta$variable)
}
} # Part 8: Create Variable and Group Code Mortality
{
# Step 1: Import professionals database
dProfi <-    read_delim("~/Profissional/SEPL/PowerBi 3/Banco de Dados/health/professionals.csv",
delim = ";", escape_double = FALSE, col_types = cols(`2010` = col_number(),
`2011` = col_number(), `2012` = col_number(),
`2013` = col_number(),
`2014` = col_number(), `2015` = col_number(),
`2016` = col_number(), `2017` = col_number(),
`2018` = col_number(), `2019` = col_number(),
`2020` = col_number()), locale = locale(decimal_mark = ",",
grouping_mark = ".", encoding = "ISO-8859-1"),
trim_ws = TRUE)
write.csv(dProfi, "C:/Users/CepaTech/Documents/GitHub/powerbi3.0/db/raw/health/dProfi.csv")
# Step 2: Rename columns
colnames(dProfi)[1:2] <- c("city", "variable")
# Step 3: Join city code with database
dProfi <- left_join(dProfi, fCity, by = "city")
#Step 4: rearrange dProfi
dProfi <- dProfi[, c(1, 14, 2:13)]
} # Part 9: Import and clean professional
{
# Step 1: Separate variable, group and type columns
dProfi <- cbind(dProfi,
as.data.frame(do.call("rbind", strsplit(as.character(dProfi$variable),' - '))))
dProfi <- dProfi[, c(1:2, 15:16, 4:14)]
colnames(dProfi)[3:4] <- c("group", "variable")
dProfi$variable <- paste("Numero de Profissionais", dProfi$variable)
} # Part 10: Create Variable and Group Code Professional
{
# Step 1: Import expenses database
dExpen <- read_delim("~/Profissional/SEPL/PowerBi 3/Banco de Dados/health/expenses.csv",
delim = ";", escape_double = FALSE, col_types = cols(`2010` = col_number(),
`2011` = col_number(), `2012` = col_number(),
`2013` = col_number(), `2014` = col_number(),
`2015` = col_number(), `2016` = col_number(),
`2017` = col_number(), `2018` = col_number(),
`2019` = col_number(), `2020` = col_number()),
locale = locale(decimal_mark = ",", grouping_mark = ".",
encoding = "ISO-8859-1"), trim_ws = TRUE)
write.csv(dExpen, "C:/Users/CepaTech/Documents/GitHub/powerbi3.0/db/raw/health/dExpen.csv")
# Step 2: Rename columns
colnames(dExpen)[1:2] <- c("city", "variable")
# Step 3: Join city code with database
dExpen <- left_join(dExpen, fCity, by = "city")
#Step 4: rearrange dExpen
dExpen <- dExpen[, c(1, 14, 2:13)]
} # Part 11: Import and clean Expenses
{
# Step 1: Separate variable, group and type columns
dExpen <- cbind(dExpen,
as.data.frame(do.call("rbind", strsplit(as.character(dExpen$variable),' - '))))
dExpen <- cbind(dExpen,
as.data.frame(do.call("rbind",
ex_between(dExpen$V2, "(", ")",
include.markers = TRUE,
trim = TRUE,
))))
# Step 2: Rename and rearrange Columns
colnames(dExpen)[15:16] <- c("group", "variable")
dExpen <- dExpen[, c(1:2, 15:16, 4:14)]
# Step 3: Eliminate problematic symbols
dExpen$variable <- gsub("\\s*\\([^\\)]+\\)","", dExpen$variable)
dExpen$group <- "Despesas Municipais"
dExpen$variable <- paste("Despesa com", dExpen$variable)
} # Part 12: Create variable and group
{
# Step 1: Bind all health databases
dHealth <- rbind(dExpen, dHospi, dImun, dLeitos, dMorta, dProfi)
# Step 2: Remove previous databases
remove(dExpen, dHospi, dImun, dLeitos, dMorta, dProfi)
} # Part 13: Bind all databases
{
# Step 1: Create fGroup with codes
fHealthGroup <- data.frame(group = unique(dHealth$group)) %>%
mutate(group_code = sequence(n()))
# Step 2: Create fvariable with codes
fHealthVariable = dHealth %>%
select(group, variable)
fHealthVariable = fHealthVariable[!duplicated(fHealthVariable), ]
fHealthVariable <- mutate(fHealthVariable, variable_code = sequence(n()))
fHealthVariable <- left_join(fHealthVariable, fHealthGroup, by = "group")
fHealthVariable <- fHealthVariable[, c(4,3,2)]
# Step 4: Export to db parameters paste
write.csv(fHealthGroup,
"C:/Users/CepaTech/Documents/GitHub/powerbi3.0/db/parameters/fHealthGroup.csv")
write.csv(fHealthVariable,
"C:/Users/CepaTech/Documents/GitHub/powerbi3.0/db/parameters/fHealthVariable.csv")
} # Part 14: Create Codes for Group, variable and standard
{
# Step 1: Join Group_code
dHealth <- left_join(dHealth, fHealthGroup, by = "group", keep = FALSE)
# Step 2: Join variable_code
dHealth <- left_join(dHealth, fHealthVariable, by = c("variable", "group_code"), keep = FALSE)
# Step 3: Join standard code
dHealth$standard_code <- case_when(dHealth$variable_code == 1|dHealth$variable_code == 3 ~ 1,
dHealth$variable_code == 4 ~ 3,
dHealth$variable_code >= 6 & dHealth$variable_code <= 22 ~ 4,
TRUE ~ 5)
# Step 5: Join Type code
dHealth$type_code <- case_when(dHealth$standard_code == 1 | dHealth$standard_code == 5  ~ 3,
dHealth$standard_code == 3 ~ 1,
TRUE ~ 2)
# Step 5: Clean dHealth
dHealth <- dHealth[, c(1:2, 16:17, 19, 18, 5:15)]
} # Part 15: Join all codes with dHealth
{
# Step 1: Turn columns into one single column called year and the values as result
dHealth <- gather(dHealth, key = "year", value = "result", c("2010":"2020"))
} # Part 16: Gather database
{
# Step 1: Join
dHealth <- left_join(dHealth, fPop, by = c("city", "year"))
# Step 2: Drop columns and prepare to export
dHealth <- dHealth[, -c(1, 9)]
# Step 3: Export clean base
write.table(dHealth,
"C:/Users/CepaTech/Documents/GitHub/powerbi3.0/db/clean/health/dHealth.csv",
sep = ";", dec = ",",
row.names = FALSE, col.names = TRUE,
na = "")
# Step 4: Remove Health parameters
remove(fHealthGroup, fHealthVariable)
} # Part 17: Join dHealth and Population
View(dHealth)
# Step 9: Rearrange database
dPIB <- dPIB[, c(8, 11, 10, 13, 12, 6, 7)]
View(fPop)
fPop <- left_join(fPop, fCity, "city")
# Step 10: Add population
dPIB <- left_join(dPIB, dPop, by = "city_code")
# Step 10: Add population
dPIB <- left_join(dPIB, fPop, by = "city_code")
View(dPIB)
# Step 1: Import Wealth database
dPIB <- read_delim("~/Profissional/SEPL/PowerBi 3/Banco de Dados/wealth/PIB.csv",
delim = ";", escape_double = FALSE, locale = locale(decimal_mark = ",",
grouping_mark = ".", encoding = "ISO-8859-1"),
trim_ws = TRUE)
colnames(dPIB)[1:2] <-  c("city", "variable")
# Step 2: Replace Variable names
dPIB$variable <- gsub(" *\\(.*?\\) *", "", dPIB$variable)
OldVariable <- unique(dPIB$variable)
NewVariable <- c("Produto Interno Bruto a Preços Correntes",
"Valor Adicionado Bruto Total",
"Valor Adicionado Bruto Agropecuaria",
"Valor Adicionado Bruto Industria",
"Valor Adicionado Bruto Comercio e Serviços",
"Produto Interno Bruto per Capita",
"Valor Adicionado Bruto Administraçao Publica",
"Imposto Recolhidos")
for (i in 1:8) {
dPIB$variable <- gsub(OldVariable[i], NewVariable[i], dPIB$variable)
}
# Step 3: Add Group Names
dPIB$group <- "PIB"
# Step 3: Add Standard
dPIB$standard <- "mil reais"
# Step 4: Add Type
dPIB$type <- "absolute"
} # Part 1: Import and Prepare Database
View(dPIB)
{
# Step 1: Import Wealth database
dPIB <- read_delim("~/Profissional/SEPL/PowerBi 3/Banco de Dados/wealth/PIB.csv",
delim = ";", escape_double = FALSE, locale = locale(decimal_mark = ",",
grouping_mark = ".", encoding = "ISO-8859-1"),
trim_ws = TRUE)
colnames(dPIB)[1:2] <-  c("city", "variable")
# Step 2: Replace Variable names
dPIB$variable <- gsub(" *\\(.*?\\) *", "", dPIB$variable)
OldVariable <- unique(dPIB$variable)
NewVariable <- c("Produto Interno Bruto a Preços Correntes",
"Valor Adicionado Bruto Total",
"Valor Adicionado Bruto Agropecuaria",
"Valor Adicionado Bruto Industria",
"Valor Adicionado Bruto Comercio e Serviços",
"Produto Interno Bruto per Capita",
"Valor Adicionado Bruto Administraçao Publica",
"Imposto Recolhidos")
for (i in 1:8) {
dPIB$variable <- gsub(OldVariable[i], NewVariable[i], dPIB$variable)
}
# Step 3: Add Group Names
dPIB$group <- "PIB"
# Step 3: Add Standard
dPIB$standard <- "mil reais"
# Step 4: Add Type
dPIB$type <- "absolute"
} # Part 1: Import and Prepare Database
{
# Step 1: Gather years
dPIB <- gather(dPIB, key = "year", value = "result", c("2010":"2018"))
# Step 2: Create PIB Variable Codes
variable <- unique(dPIB$variable)
fWealthVariable <- as.data.frame(variable) %>%
mutate(variable_code = sequence(n()))
fWealthVariable <- fWealthVariable[, c(2,1)]
# Step 3: Create PIB Group Code
fWealthGroup <- data.frame(group_code = 1, group = "PIB")
# Step 4: Add city code
dPIB <- left_join(dPIB, fCity, "city")
# Step 5: Add Variable codes
dPIB <- left_join(dPIB, fWealthVariable, "variable")
# Step 6: Add Group code
dPIB <- left_join(dPIB, fWealthGroup, "group")
# Step 7: Add Standard code
dPIB <- left_join(dPIB, fStandard, "standard")
# Step 8: Add Type code
dPIB <- left_join(dPIB, fType, "type")
# Step 9: Rearrange database
dPIB <- dPIB[, c(8, 11, 10, 13, 12, 6, 7)]
# Step 10: Add population
dPIB <- left_join(dPIB, fPop, by = c("city_code", "year"))
} # Part 2: Add codes
View(dPIB)
# Step 11: Rearrange Databsae
dPIB <- dPIB[, c(1:7, 10)]
# Part 3: Export clean dWealth
write.table(dPIB,
"C:/Users/CepaTech/Documents/GitHub/powerbi3.0/db/clean/wealth/dWealth.csv",
sep = ";", dec = ",",
row.names = FALSE, col.names = TRUE,
na = "")
